import numpy as np
import pandas as pd
import plotly.offline as pyo
import plotly.graph_objs as go
import dash
import dash_core_components as core
import dash_html_components as html
from dash.dependencies import Input, Output
import sys
import pickle
from keras.models import model_from_json
from keras import backend as K
from models import Models

app = dash.Dash()

def generateText(sampling_model, word2idx, idx2word, MAX_SEQ_LEN, UNIT_DIM):
    '''
    This function takes in the sampling model, word2idx, idx2word, maximum sequence length and unit dimension of LSTM units as input
    and returns the output sequence generated by the sampling model.

    sampling_model (Keras Model) : A model that uses above pretrained layers but takes one word at a time.
    word2idx (dict) : A dictionary containing words in key and their corresponding index in value
    idx2word (dict) : A dictionary containing indices in key and their corresponding word in value
    max_seq_len (int) : The maximum length of input sequence
    unit_dim (int) : The dimension of LSTM units

    Returns:
    output_text (str) : A string that contains output sequence generated by the sampling model.
    '''
    output_list = []
    for each in range(20):
        output_sentence = Models.sampleFromModel(sampling_model, word2idx, idx2word, MAX_SEQ_LEN, UNIT_DIM)
        output_sentence = output_sentence.capitalize()
        output_list.append(output_sentence)

    output_text = '. '.join(output_list)
    return output_text

app.layout = html.Div([
    html.H1(id = 'h1-text',
            children = 'Mimicking Tolkien',
            style = {'height' : '20%',
                    'fontStyle' : 'italic'}),

    html.Button(id = 'button-generate',
                children = 'Suprise Me'),

    html.P(id = 'p-text',
        children = 'Your text will be generated here ...',
        style = {'fontSize' : '24px',
                'fontStyle' : 'italic',
                'height' : '40%'}),

    html.P(id = 'p2-text',
        style = {'fontSize' : '24px',
                'fontStyle' : 'italic',
                'height' : '40%'})
], style = {'width' : '100%',
            'height' : '100%',
            'backgroundColor' : '#cc9900'})

@app.callback([Output('p-text', 'children'),
            Output('p2-text', 'children')],
            [Input('button-generate', 'n_clicks')])
def affectP(n_clicks):
    '''
    This is a callback function that takes in n_clicks of the button as input and returns text for P tags.

    Parameters:
    n_clicks (int) : Number of times the button was clicked

    Returns:
    para1_text (str) : Text for the P tag p-text
    para2_text (str) : Text for the P tag p2-text
    '''
    MAX_SEQ_LEN = 100
    UNIT_DIM = 64

    json_file = open('Models/sampling_model.json', 'r')
    sampling_model_json = json_file.read()
    json_file.close()
    sampling_model = model_from_json(sampling_model_json)
    sampling_model.load_weights('Models/sampling_model.h5')

    word2idx, idx2word = {}, {}

    with open('Models/word2idx.pickle', 'rb') as f:
        word2idx = pickle.load(f)

    with open('Models/idx2word.pickle', 'rb') as f:
        idx2word = pickle.load(f)

    para1_text = generateText(sampling_model, word2idx, idx2word, MAX_SEQ_LEN, UNIT_DIM)
    para2_text = generateText(sampling_model, word2idx, idx2word, MAX_SEQ_LEN, UNIT_DIM)

    K.clear_session()

    return para1_text, para2_text


if __name__ == '__main__':
    app.run_server()
